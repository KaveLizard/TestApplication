@page "/editevent/{eventId}"
@using TestApplication.Models
@using TestApplication.Services

<div>
    <h4>Edit Event</h4>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color:red;">@errorMessage</p>
    }
    <form>
        <div class="form-group">
            <label for="eventName">Event Name</label>
            <input type="text" class="form-control" id="eventName" @bind="eventModel.Name">
        </div>
        <div class="form-group">
            <label for="eventDescription">Event Description</label>
            <textarea class="form-control" id="eventDescription" @bind="eventModel.Name"></textarea>
        </div>
        <button type="submit" class="btn btn-primary" @onclick="UpdateEvent">Update Event</button>
    </form>
</div>

@code {
    [Parameter]
    public string eventId { get; set; }

    private Event eventModel = new Event();

    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Загрузка информации о событии с сервера по eventId
            //eventModel = await EventService.GetEventById(EventId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading event: {ex.Message}";
        }
    }

    private async Task UpdateEvent()
    {
        // Логика обновления информации о событии на сервере
        // await eventService.UpdateEvent(eventModel);

        // В случае успешного обновления события
        // Можно добавить логику для перехода на другую страницу или вывода сообщения об успешном обновлении
    }
}